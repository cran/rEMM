
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("rEMM")
Loading required package: proxy

Attaching package: ‘proxy’

The following objects are masked from ‘package:stats’:

    as.dist, dist

Loading required package: MASS
Loading required package: clusterGeneration
Loading required package: igraph

Attaching package: ‘rEMM’

The following objects are masked from ‘package:igraph’:

    as.igraph, clusters

> library("testthat")
> data("16S")
> 
> data <- Mollicutes16S+1
> test <- Mollicutes16S[2:10,]+1
> 
> ## create two EMMs for different data
> emm <- EMM("Kullback", threshold=0.1, data=data)
> emm
EMM with 76 states/clusters.
 Measure: Kullback 
 Threshold: 0.1 
 Centroid: FALSE 
 Lambda: 0 
> 
> 
> 
> ## TRACDS
> expect_identical(nstates(emm), length(states(emm)))
> 
> expect_is(current_state(emm), "character")
> transitions(emm)
       from to  
  [1,] "1"  "2" 
  [2,] "36" "2" 
  [3,] "43" "2" 
  [4,] "2"  "3" 
  [5,] "3"  "4" 
  [6,] "17" "4" 
  [7,] "25" "4" 
  [8,] "38" "4" 
  [9,] "44" "4" 
 [10,] "49" "4" 
 [11,] "60" "4" 
 [12,] "74" "4" 
 [13,] "4"  "5" 
 [14,] "5"  "6" 
 [15,] "18" "6" 
 [16,] "26" "6" 
 [17,] "63" "6" 
 [18,] "6"  "7" 
 [19,] "7"  "8" 
 [20,] "19" "8" 
 [21,] "27" "8" 
 [22,] "32" "8" 
 [23,] "39" "8" 
 [24,] "45" "8" 
 [25,] "64" "8" 
 [26,] "8"  "9" 
 [27,] "9"  "10"
 [28,] "20" "10"
 [29,] "35" "10"
 [30,] "75" "10"
 [31,] "10" "11"
 [32,] "29" "11"
 [33,] "72" "11"
 [34,] "11" "12"
 [35,] "12" "13"
 [36,] "41" "13"
 [37,] "13" "14"
 [38,] "21" "14"
 [39,] "30" "14"
 [40,] "46" "14"
 [41,] "66" "14"
 [42,] "73" "14"
 [43,] "76" "14"
 [44,] "14" "15"
 [45,] "1"  "16"
 [46,] "2"  "17"
 [47,] "16" "17"
 [48,] "62" "17"
 [49,] "4"  "18"
 [50,] "6"  "19"
 [51,] "59" "19"
 [52,] "8"  "20"
 [53,] "12" "21"
 [54,] "34" "21"
 [55,] "14" "22"
 [56,] "23" "24"
 [57,] "24" "25"
 [58,] "4"  "26"
 [59,] "6"  "27"
 [60,] "8"  "28"
 [61,] "53" "28"
 [62,] "28" "29"
 [63,] "33" "29"
 [64,] "65" "29"
 [65,] "12" "30"
 [66,] "61" "30"
 [67,] "14" "31"
 [68,] "6"  "32"
 [69,] "8"  "33"
 [70,] "11" "34"
 [71,] "54" "34"
 [72,] "8"  "35"
 [73,] "36" "37"
 [74,] "37" "38"
 [75,] "62" "38"
 [76,] "6"  "39"
 [77,] "29" "40"
 [78,] "11" "41"
 [79,] "40" "41"
 [80,] "14" "42"
 [81,] "2"  "44"
 [82,] "6"  "45"
 [83,] "12" "46"
 [84,] "47" "48"
 [85,] "48" "49"
 [86,] "67" "49"
 [87,] "4"  "50"
 [88,] "68" "50"
 [89,] "50" "51"
 [90,] "51" "52"
 [91,] "52" "53"
 [92,] "70" "53"
 [93,] "29" "54"
 [94,] "72" "54"
 [95,] "54" "55"
 [96,] "55" "56"
 [97,] "56" "57"
 [98,] "57" "58"
 [99,] "18" "59"
[100,] "2"  "60"
[101,] "62" "60"
[102,] "11" "61"
[103,] "40" "61"
[104,] "1"  "62"
[105,] "4"  "63"
[106,] "68" "63"
[107,] "6"  "64"
[108,] "8"  "65"
[109,] "61" "66"
[110,] "1"  "67"
[111,] "17" "68"
[112,] "38" "68"
[113,] "49" "68"
[114,] "50" "69"
[115,] "69" "70"
[116,] "53" "71"
[117,] "65" "72"
[118,] "71" "72"
[119,] "34" "73"
[120,] "16" "74"
[121,] "8"  "75"
[122,] "41" "76"
> rare_transitions(emm, 1)
      from to  
 [1,] "36" "2" 
 [2,] "43" "2" 
 [3,] "44" "4" 
 [4,] "32" "8" 
 [5,] "45" "8" 
 [6,] "46" "14"
 [7,] "2"  "17"
 [8,] "59" "19"
 [9,] "34" "21"
[10,] "33" "29"
[11,] "61" "30"
[12,] "6"  "32"
[13,] "8"  "33"
[14,] "11" "34"
[15,] "2"  "44"
[16,] "6"  "45"
[17,] "12" "46"
[18,] "18" "59"
[19,] "2"  "60"
> 
> ## TRACDS
> cluster_counts(emm)
 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 
21  9  6 24 11 25  6 26  6 12 20 13  6 28  6  6  7  7  8  2  8 14  2  2  2  2 
27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 
 2  9 14  3  4  1  1  3  2  4  3  5  4  6  5  3  1  1  1  1  2  2  4  4  2  2 
53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 
 4  4  2  2  2  2  1  3  7  6  6  4  6  6  2  6  2  2  2  4  2  2  2  2 
> expect_equivalent(nrow(cluster_centers(emm)), nclusters(emm))
> expect_equivalent(nclusters(emm), nstates(emm))
> expect_equivalent(clusters(emm), rownames(cluster_centers(emm)))
> expect_is(last_clustering(emm), "character")
> expect_equivalent(nrow(data), length(last_clustering(emm)))
> 
> rare_clusters(emm, 1)
[1] "32" "33" "43" "44" "45" "46" "59"
> find_clusters(emm, test)
[1] "1" "2" "3" "4" "5" "6" "7" "8" "9"
> 
> ## score, predict et al
> expect_equivalent(nrow(transition_table(emm, test)), nrow(test)-1L)
> transition_table(emm, test, prior=FALSE)
  from to probability
1    1  2   0.3333333
2    2  3   0.6666667
3    3  4   1.0000000
4    4  5   0.4583333
5    5  6   1.0000000
6    6  7   0.2400000
7    7  8   1.0000000
8    8  9   0.2307692
> 
> score(emm, test)
[1] 0.08888643
> score(emm, test, prior=FALSE)
[1] 0.5235037
> score(emm, test, method="sum")
[1] 0.09142804
> score(emm, test, method="sum", prior=FALSE)
[1] 0.6161378
> 
> predict(emm, "1")
[1] "2"
> p <- predict(emm, "1", probabilities=TRUE)
> p[p>0]
        2        16        62        67 
0.3333333 0.2857143 0.2857143 0.0952381 
> p <- predict(emm, "1", probabilities=TRUE, prior=FALSE)
> table(p)
p
                 0 0.0952380952380952  0.285714285714286  0.333333333333333 
                72                  1                  2                  1 
> 
> ## reset
> reset(emm)
> expect_identical(current_state(emm), NA_character_)
> 
> ## copy: these need to be false!
> expect_true(!identical(emm@tnn_d, copy(emm)@tnn_d))
> expect_true(!identical(emm@tracds_d, copy(emm)@tracds_d))
> 
> 
